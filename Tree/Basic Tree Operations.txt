class Node{
    int data;
    Node right;
    Node left;
    
    Node(int value){
        data = value;
        left = null;
        right = null;
    }
}

class BinarySearchTree{
    
    Node insertNode(Node root,int data){
        if(root == null){
            root = new Node(data);
        }
        else if(root.data > data){
            root.left = insertNode(root.left,data);
        }
        else{
            root.right = insertNode(root.right,data);
        }
        return root;
    }
    
    Node insertNodebyLoop(Node root,int data){
        if(root == null){
            return new Node(data);
        }
        Node current = root;
        Node parent = null;
        while(current != null){
            parent = current;
            if(current.data > data){
                current = current.left;
            }
            else{
                current = current.right;
            }
        }
        if(parent.data > data){
            parent.left = new Node(data);
        }
        else{
            parent.right = new Node(data);
        }
        return root;
        
    }

    // findMax*******

	int findMax(Node root){
        if(root == null){
            return -1;
        }
        else if(root.right == null){
            return root.data;
        }
        else{
            return findMax(root.right);
        }
    }
    
    int findMaxItr(Node root){
        if(root == null){
            return -1;
        }
        while(root.right != null){
            root = root.right;
        }
        return root.data;
    }
	// findHeight******
	int findHeight(Node root){
        if(root == null){
            return -1;
        }
        int leftHeight = findHeight(root.left);
        int rightHeight = findHeight(root.right);
        return Math.max(leftHeight, rightHeight) + 1;
    }
// levelOrder traversal******
	void levelOrder(Node root){
        Queue<Node> q = new LinkedList<Node>();
        q.add(root);
        while(q.peek() != null){
            Node current = q.peek();
            System.out.println(current.data);
            if(current.left != null){
                q.add(current.left);
            }
            if(current.right != null){
                q.add(current.right);
            }
            q.remove();
        }
    }

// preOrder, inOrder and postOrder traversal*****
void preOrder(Node root){
        if(root == null){
            return;
        }
        System.out.println(root.data);
        preOrder(root.left);
        preOrder(root.right);
    }

    void inOrder(Node root){
        if(root == null){
            return;
        }
        inOrder(root.left);
        System.out.println(root.data);
        inOrder(root.right);
    }

    void postOrder(Node root){
        if(root == null){
            return;
        }
        postOrder(root.left);
        postOrder(root.right);
        System.out.println(root.data);
    }
// delete node*****
Node deleteNode(Node root,int data){
        if(root == null){
            return root;
        }
        else if(root.data > data){
            return root.left = deleteNode(root.left,data);
        }
        else if(root.data < data){
            return root.right = deleteNode(root.right,data);
        }
        else{
            if(root.left == null && root.right == null){
                root = null;
                return root;
            }
            else if(root.left == null){
                Node temp = root;
                root = root.right;
                temp = null;
                return root;
            }
            else if(root.right == null){
                Node temp = root;
                root = root.left;
                temp = null;
                return root;
            }
            else{
                Node temp = findMin(root.right);
                root.data = temp.data;
                root.right = deleteNode(root.left,temp.data);
                return root;
            }
        }
    }
// find in-order successor*****
    Node findMin(Node r){
        if(r.left == null){
            return r;
        }
        return r = findMin(r.left);
    }

    Node Find(Node root,int data){
        if(root == null){
            return root;
        }
        if(root.data > data){
            root = root.left;
            return Find(root,data);
        }
        else if(root.data < data){
            root = root.right;
            return Find(root,data);
        }

        return root;
    }

    Node findMinRight(Node root){
        while(root.left != null){
            root = root.left;
        }
        return root;
    }

    Node inOrderSuccessor(Node root,int data){
        Node current = Find(root,data);
        Node anccesstor = root;
        Node successor = null;
        if(root == null){
            return root;
        }
        if(current.right != null){
            successor = findMinRight(root.right);
            return successor;
        }

        while(anccesstor != current){
            if(anccesstor.data > current.data){
                successor = anccesstor;
                anccesstor = anccesstor.left;
            }
            else{
                anccesstor = anccesstor.right;
            }
        }
        return successor;
    }
    
}

public class Main
{
	public static void main(String[] args) {
		BinarySearchTree bst = new BinarySearchTree();
		Node root = null;
		root = bst.insertNodebyLoop(root,50);
		bst.insertNodebyLoop(root,25);
		bst.insertNodebyLoop(root,65);
		bst.insertNodebyLoop(root,75);
		bst.insertNodebyLoop(root,45);
		System.out.println(root.data);
		System.out.println(root.left.data);
		System.out.println(root.right.data);
		System.out.println(root.left.right.data);
	}
}
